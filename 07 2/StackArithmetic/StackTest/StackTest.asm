    // Init
    // This file is part of www.nand2tetris.org
    // and the book "The Elements of Computing Systems"
    // by Nisan and Schocken, MIT Press.
    // File name: projects/07/StackArithmetic/StackTest/StackTest.vm
    // Executes a sequence of arithmetic and logical operations
    // on the stack. 
    // push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
    // eq
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=M-D
@TRUE0
D;JEQ
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP0
0;JMP
(TRUE0)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP0)
    // push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
    // eq
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=M-D
@TRUE1
D;JEQ
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP1
0;JMP
(TRUE1)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP1)
    // push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
    // eq
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=M-D
@TRUE2
D;JEQ
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP2
0;JMP
(TRUE2)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP2)
    // push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
    // lt
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=D-M
@TRUE3
D;JLT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP3
0;JMP
(TRUE3)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP3)
    // push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
    // lt
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=D-M
@TRUE4
D;JLT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP4
0;JMP
(TRUE4)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP4)
    // push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
    // lt
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=D-M
@TRUE5
D;JLT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP5
0;JMP
(TRUE5)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP5)
    // push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
    // gt
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=D-M
@TRUE6
D;JGT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP6
0;JMP
(TRUE6)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP6)
    // push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
    // gt
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=D-M
@TRUE7
D;JGT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP7
0;JMP
(TRUE7)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP7)
    // push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
    // gt
@SP
M=M-1
A=M
D=M
@R3
M=D
@SP
M=M-1
A=M
D=M
@R3
D=D-M
@TRUE8
D;JGT
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@ENDOP8
0;JMP
(TRUE8)
@1
D=-A
@SP
A=M
M=D
@SP
M=M+1
(ENDOP8)
    // push constant 57
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
    // push constant 53
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
    // add
@SP
M=M-1
A=M
D=M
@R1
M=D
@SP
M=M-1
A=M
D=M
@R1
D=D+M
@SP
A=M
M=D
@SP
M=M+1
    // push constant 112
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
    // sub
@SP
M=M-1
A=M
D=M
@R1
M=D
@SP
M=M-1
A=M
D=M
@R1
D=D-M
@SP
A=M
M=D
@SP
M=M+1
    // neg
@SP
M=M-1
A=M
D=M
D=-D
@SP
A=M
M=D
@SP
M=M+1
    // and
@SP
M=M-1
A=M
D=M
@R1
M=D
@SP
M=M-1
A=M
D=M
@R1
D=D&M
@SP
A=M
M=D
@SP
M=M+1
    // push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
    // or
@SP
M=M-1
A=M
D=M
@R1
M=D
@SP
M=M-1
A=M
D=M
@R1
D=D|M
@SP
A=M
M=D
@SP
M=M+1
    // not
@SP
M=M-1
A=M
D=M
D=!D
@SP
A=M
M=D
@SP
M=M+1
    // Infinite loop
(label1)
@label1
0;JMP
